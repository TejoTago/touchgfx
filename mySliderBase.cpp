/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/mySliderBase.hpp>
#include <images/BitmapDatabase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

mySliderBase::mySliderBase() :
    triggerValidatedCallback(0)
{
    setWidth(188);
    setHeight(80);
    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_SMALL_ROUND_NORMAL_ID));
    add(image1);

    container1.setPosition(25, 20, 40, 40);
    circle1.setPosition(0, 0, 40, 40);
    circle1.setCenter(20, 20);
    circle1.setRadius(17);
    circle1.setLineWidth(0);
    circle1.setArc(0, 360);
    circle1Painter.setColor(touchgfx::Color::getColorFromRGB(237, 187, 187));
    circle1.setPainter(circle1Painter);
    container1.add(circle1);

    arrow.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_50_50_C46760_SVG_ID));
    arrow.setPosition(0, 0, 40, 40);
    arrow.setScalingAlgorithm(touchgfx::ScalableImage::BILINEAR_INTERPOLATION);
    container1.add(arrow);

    check.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_CHECK_50_50_C46760_SVG_ID));
    check.setPosition(0, 0, 40, 40);
    check.setScalingAlgorithm(touchgfx::ScalableImage::BILINEAR_INTERPOLATION);
    check.setAlpha(0);
    container1.add(check);

    add(container1);

    textSlidehere.setPosition(65, 31, 82, 19);
    textSlidehere.setColor(touchgfx::Color::getColorFromRGB(237, 187, 187));
    textSlidehere.setLinespacing(0);
    textSlidehere.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CD36));
    add(textSlidehere);

    textConfirmed.setPosition(45, 31, 82, 19);
    textConfirmed.setColor(touchgfx::Color::getColorFromRGB(196, 103, 96));
    textConfirmed.setLinespacing(0);
    textConfirmed.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZJFG));
    textConfirmed.setAlpha(0);
    add(textConfirmed);
}

mySliderBase::~mySliderBase()
{

}

void mySliderBase::initialize()
{

}

void mySliderBase::actionValidated()
{
    //I_check_fadeIn
    //When actionValidated is called fade check
    //Fade check to alpha:255 with SineInOut easing in 200 ms (12 Ticks)
    check.clearFadeAnimationEndedAction();
    check.startFadeAnimation(255, 12, touchgfx::EasingEquations::sineEaseInOut);

    //I_arrow_fadeOut
    //When actionValidated is called fade arrow
    //Fade arrow to alpha:0 with SineInOut easing in 200 ms (12 Ticks)
    arrow.clearFadeAnimationEndedAction();
    arrow.startFadeAnimation(0, 12, touchgfx::EasingEquations::sineEaseInOut);

    //I_Validated
    //When actionValidated is called emit triggerValidated callback
    //Emit callback
    emitTriggerValidatedCallback();
}

void mySliderBase::actionFailed()
{
    //I_Back
    //When actionFailed is called move container1
    //Set position x:20 and y:20 on container1
    container1.moveTo(25,20);

    //I_textSlidehere_FadeIn
    //When actionFailed is called fade textSlidehere
    //Fade textSlidehere to alpha:255 with LinearInOut easing in 200 ms (12 Ticks)
    textSlidehere.clearFadeAnimationEndedAction();
    textSlidehere.setFadeAnimationDelay(12);
    textSlidehere.startFadeAnimation(255, 12, touchgfx::EasingEquations::linearEaseInOut);

    //I_textConfirmed_FadeOut
    //When actionFailed is called fade textConfirmed
    //Fade textConfirmed to alpha:0 with SineInOut easing in 200 ms (12 Ticks)
    textConfirmed.clearFadeAnimationEndedAction();
    textConfirmed.setFadeAnimationDelay(12);
    textConfirmed.startFadeAnimation(0, 12, touchgfx::EasingEquations::sineEaseInOut);
}
