/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/radiobuttonsemaphorenew_screen/RadioButtonSemaphoreNewViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

RadioButtonSemaphoreNewViewBase::RadioButtonSemaphoreNewViewBase() :
    radioButtonSelectedCallback(this, &RadioButtonSemaphoreNewViewBase::radioButtonSelectedCallbackHandler),
    radioButtonDeselectedCallback(this, &RadioButtonSemaphoreNewViewBase::radioButtonDeselectedCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BG_LIGHTBLUEGRADIENT_ID));
    scalableImage1.setPosition(0, 0, 480, 272);
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(scalableImage1);

    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
    
    radioButtonGroup1.setRadioButtonDeselectedHandler(radioButtonDeselectedCallback);
    
    radioButtonOFF.setXY(96, 80);
    radioButtonOFF.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_PRESSED_ID));
    radioButtonOFF.setSelected(true);
    radioButtonOFF.setDeselectionEnabled(false);
    radioButtonGroup1.add(radioButtonOFF);
    add(radioButtonOFF);

    radioButtonFast.setXY(96, 160);
    radioButtonFast.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_PRESSED_ID));
    radioButtonFast.setSelected(false);
    radioButtonFast.setDeselectionEnabled(false);
    radioButtonGroup1.add(radioButtonFast);
    add(radioButtonFast);

    radioButtonSlow.setXY(96, 118);
    radioButtonSlow.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_PRESSED_ID));
    radioButtonSlow.setSelected(false);
    radioButtonSlow.setDeselectionEnabled(false);
    radioButtonGroup1.add(radioButtonSlow);
    add(radioButtonSlow);

    Semaphore.setPosition(260, 11, 120, 250);
    boxWithBorder1.setPosition(20, 29, 80, 200);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(8, 8, 46));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 229, 225));
    boxWithBorder1.setBorderSize(5);
    Semaphore.add(boxWithBorder1);

    redON.setPosition(20, 29, 80, 80);
    redON.setCenter(40, 40);
    redON.setRadius(25);
    redON.setLineWidth(0);
    redON.setArc(0, 360);
    redONPainter.setColor(touchgfx::Color::getColorFromRGB(242, 10, 72));
    redON.setPainter(redONPainter);
    Semaphore.add(redON);

    yellowON.setPosition(20, 91, 80, 80);
    yellowON.setCenter(40, 40);
    yellowON.setRadius(25);
    yellowON.setLineWidth(0);
    yellowON.setArc(0, 360);
    yellowONPainter.setColor(touchgfx::Color::getColorFromRGB(218, 230, 5));
    yellowON.setPainter(yellowONPainter);
    Semaphore.add(yellowON);

    greenON.setPosition(20, 149, 80, 80);
    greenON.setCenter(40, 40);
    greenON.setRadius(25);
    greenON.setLineWidth(0);
    greenON.setArc(0, 360);
    greenONPainter.setColor(touchgfx::Color::getColorFromRGB(23, 245, 7));
    greenON.setPainter(greenONPainter);
    Semaphore.add(greenON);

    add(Semaphore);

    textArea1.setXY(143, 81);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(73, 72, 84));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NKUZ));
    add(textArea1);

    textArea1_1.setXY(143, 119);
    textArea1_1.setColor(touchgfx::Color::getColorFromRGB(73, 72, 84));
    textArea1_1.setLinespacing(0);
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3P1I));
    add(textArea1_1);

    textArea1_1_1.setXY(143, 161);
    textArea1_1_1.setColor(touchgfx::Color::getColorFromRGB(73, 72, 84));
    textArea1_1_1.setLinespacing(0);
    textArea1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PMSW));
    add(textArea1_1_1);
}

RadioButtonSemaphoreNewViewBase::~RadioButtonSemaphoreNewViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void RadioButtonSemaphoreNewViewBase::setupScreen()
{

}

void RadioButtonSemaphoreNewViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &radioButtonOFF)
    {
        //Interaction1
        //When radioButtonOFF selected call virtual function
        //Call semaphore
        semaphore();
    }
    if (&src == &radioButtonSlow)
    {
        //Interaction3
        //When radioButtonSlow selected call virtual function
        //Call semaphore
        semaphore();
    }
    if (&src == &radioButtonFast)
    {
        //Interaction5
        //When radioButtonFast selected call virtual function
        //Call semaphore
        semaphore();
    }
}

void RadioButtonSemaphoreNewViewBase::radioButtonDeselectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &radioButtonOFF)
    {
        //Interaction2
        //When radioButtonOFF deselected call virtual function
        //Call semaphore
        semaphore();
    }
    if (&src == &radioButtonSlow)
    {
        //Interaction4
        //When radioButtonSlow deselected call virtual function
        //Call semaphore
        semaphore();
    }
    if (&src == &radioButtonFast)
    {
        //Interaction6
        //When radioButtonFast deselected call virtual function
        //Call semaphore
        semaphore();
    }
}
