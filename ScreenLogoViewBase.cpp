/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screenlogo_screen/ScreenLogoViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

ScreenLogoViewBase::ScreenLogoViewBase() :
    updateItemCallback(this, &ScreenLogoViewBase::updateItemCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    scalableImage2.setBitmap(touchgfx::Bitmap(BITMAP_BG_MAGENTAGRADIENT_ID));
    scalableImage2.setPosition(0, 0, 480, 272);
    scalableImage2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(scalableImage2);

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BG_LIGHTBLUEGRADIENT_ID));
    scalableImage1.setPosition(0, 0, 480, 272);
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(scalableImage1);

    scrollWheel1.setPosition(1, 207, 479, 65);
    scrollWheel1.setHorizontal(true);
    scrollWheel1.setCircular(true);
    scrollWheel1.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollWheel1.setSwipeAcceleration(10);
    scrollWheel1.setDragAcceleration(10);
    scrollWheel1.setNumberOfItems(6);
    scrollWheel1.setSelectedItemOffset(0);
    scrollWheel1.setOvershootPercentage(75);
    scrollWheel1.setDrawableSize(755, 0);
    scrollWheel1.setDrawables(scrollWheel1ListItems, updateItemCallback);
    scrollWheel1.animateToItem(4, 0);
    add(scrollWheel1);

    shapeL.setPosition(-96, 0, 80, 80);
    shapeL.setOrigin(0.0f, 0.0f);
    shapeL.setScale(1.0f, 1.0f);
    shapeL.setAngle(0.0f);
    shapeLPainter.setColor(touchgfx::Color::getColorFromRGB(11, 50, 222));
    shapeL.setPainter(shapeLPainter);
    const touchgfx::AbstractShape::ShapePoint<float> shapeLPoints[6] = { { 0.0f, 0.0f }, { 20.0f, 0.0f }, { 20.0f, 60.0f }, { 60.0f, 60.0f }, { 60.0f, 80.0f }, { 0.0f, 80.0f } };
    shapeL.setShape(shapeLPoints);
    add(shapeL);

    container1.setPosition(200, 285, 80, 80);
    shapeA1.setPosition(0, 0, 80, 80);
    shapeA1.setOrigin(0.0f, 0.0f);
    shapeA1.setScale(1.0f, 1.0f);
    shapeA1.setAngle(0.0f);
    shapeA1Painter.setColor(touchgfx::Color::getColorFromRGB(11, 50, 222));
    shapeA1.setPainter(shapeA1Painter);
    const touchgfx::AbstractShape::ShapePoint<float> shapeA1Points[8] = { { 0.0f, 0.0f }, { 80.0f, 0.0f }, { 80.0f, 80.0f }, { 60.0f, 80.0f }, { 60.0f, 20.0f }, { 20.0f, 20.0f }, { 20.0f, 80.0f }, { 0.0f, 80.0f } };
    shapeA1.setShape(shapeA1Points);
    container1.add(shapeA1);

    shapeA2.setPosition(0, -22, 80, 85);
    shapeA2.setOrigin(0.0f, 0.0f);
    shapeA2.setScale(1.0f, 1.0f);
    shapeA2.setAngle(0.0f);
    shapeA2Painter.setColor(touchgfx::Color::getColorFromRGB(11, 50, 222));
    shapeA2.setPainter(shapeA2Painter);
    const touchgfx::AbstractShape::ShapePoint<float> shapeA2Points[4] = { { 0.0f, 60.0f }, { 80.0f, 60.0f }, { 80.0f, 80.0f }, { 0.0f, 80.0f } };
    shapeA2.setShape(shapeA2Points);
    container1.add(shapeA2);

    add(container1);

    textArea1.setPosition(180, 21, 121, 53);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LHAH));
    textArea1.setAlpha(250);
    add(textArea1);

    textArea1_2.setPosition(343, 242, 144, 30);
    textArea1_2.setColor(touchgfx::Color::getColorFromRGB(240, 101, 14));
    textArea1_2.setLinespacing(0);
    textArea1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RYBS));
    textArea1_2.setAlpha(200);
    add(textArea1_2);

    textArea1_1.setPosition(156, 68, 169, 53);
    textArea1_1.setColor(touchgfx::Color::getColorFromRGB(36, 181, 176));
    textArea1_1.setLinespacing(0);
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KRKJ));
    textArea1_1.setAlpha(250);
    add(textArea1_1);
}

ScreenLogoViewBase::~ScreenLogoViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void ScreenLogoViewBase::setupScreen()
{
    scrollWheel1.initialize();
    for (int i = 0; i < scrollWheel1ListItems.getNumberOfDrawables(); i++)
    {
        scrollWheel1ListItems[i].initialize();
    }
    transitionBegins();
}

void ScreenLogoViewBase::transitionBegins()
{
    //Interaction1
    //When screen transition begins move shapeL
    //Move shapeL to x:140, y:127 with CubicIn easing in 1000 ms (60 Ticks)
    shapeL.clearMoveAnimationEndedAction();
    shapeL.startMoveAnimation(140, 127, 60, touchgfx::EasingEquations::cubicEaseIn, touchgfx::EasingEquations::cubicEaseIn);

    //Interaction2
    //When screen transition begins move container1
    //Move container1 to x:210, y:127 with CubicIn easing in 1000 ms (60 Ticks)
    container1.clearMoveAnimationEndedAction();
    container1.startMoveAnimation(210, 127, 60, touchgfx::EasingEquations::cubicEaseIn, touchgfx::EasingEquations::cubicEaseIn);
}

void ScreenLogoViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollWheel1ListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        CustomContainer1* cc = (CustomContainer1*)d;
        scrollWheel1UpdateItem(*cc, itemIndex);
    }
}
