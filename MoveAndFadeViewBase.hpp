/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MOVEANDFADEVIEWBASE_HPP
#define MOVEANDFADEVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/moveandfade_screen/MoveAndFadePresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/mixins/Draggable.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>

class MoveAndFadeViewBase : public touchgfx::View<MoveAndFadePresenter>
{
public:
    MoveAndFadeViewBase();
    virtual ~MoveAndFadeViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void volumeControlOn()
    {
        // Override and implement this function in MoveAndFade
    }
    virtual void volumeControlOff()
    {
        // Override and implement this function in MoveAndFade
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage background;
    touchgfx::Container cLights;
    touchgfx::Line lineLights;
    touchgfx::PainterRGB565 lineLightsPainter;
    touchgfx::Draggable< touchgfx::Circle > circleLights;
    touchgfx::PainterRGB565 circleLightsPainter;
    touchgfx::ScalableImage lights;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonLightsTurnUp;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonLightsDim;
    touchgfx::Container cVolume;
    touchgfx::Line lineVolume;
    touchgfx::PainterRGB565 lineVolumePainter;
    touchgfx::MoveAnimator< touchgfx::Circle > circleVolume;
    touchgfx::PainterRGB565 circleVolumePainter;
    touchgfx::ScalableImage volumeOFF;
    touchgfx::ScalableImage volumeON;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonVolumeON;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonVolumeOFF;
    touchgfx::Container cWifi;
    touchgfx::Line lineWifi;
    touchgfx::PainterRGB565 lineWifiPainter;
    touchgfx::MoveAnimator< touchgfx::Circle > circleWifi;
    touchgfx::PainterRGB565 circleWifiPainter;
    touchgfx::ScalableImage wifiOFF;
    touchgfx::ScalableImage wifiON;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonWifiON;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonWifiOFF;
    touchgfx::Container cScreen;
    touchgfx::Line lineScreenTop;
    touchgfx::PainterRGB565 lineScreenTopPainter;
    touchgfx::Circle circleScreen;
    touchgfx::PainterRGB565 circleScreenPainter;
    touchgfx::Line lineScreenBottom;
    touchgfx::PainterRGB565 lineScreenBottomPainter;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MoveAndFadeViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback < MoveAndFadeViewBase, const touchgfx::MoveAnimator<touchgfx::Circle>& > i_Wifi_ONEndedCallback;
    touchgfx::Callback < MoveAndFadeViewBase, const touchgfx::MoveAnimator<touchgfx::Circle>& > i_Wifi_OFFEndedCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void i_Wifi_ONEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::Circle>& comp);
    void i_Wifi_OFFEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::Circle>& comp);

};

#endif // MOVEANDFADEVIEWBASE_HPP
